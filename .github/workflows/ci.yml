name: CI Pipeline

on:
  pull_request:
    branches: [ dev ]

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # Backend Setup and Tests
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Django Tests
      working-directory: ./backend
      run: |
        python manage.py test apps.reservations.tests

    - name: Build Backend Docker image
      working-directory: ./backend
      run: docker build -t reservation-backend .

    # Frontend Setup and Tests
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run tests
      working-directory: ./frontend
      run: npm run test:ci

    - name: Build application
      working-directory: ./frontend
      run: npm run build

    - name: Build Docker image
      working-directory: ./frontend
      run: docker build -t reservation-frontend .

    - name: Check Docker build
      working-directory: ./frontend
      run: |
        if [ $? -eq 0 ]; then
          echo "Docker build successful"
        else
          echo "Docker build failed"
          exit 1
        fi

    # Docker Compose Check
    - name: Verify Docker Compose
      run: |
        docker compose build
        docker compose up -d
        sleep 10
        docker compose ps
        docker compose down

    - name: Create Issue on Failure
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          const pr_number = context.payload.pull_request.number;
          const pr_title = context.payload.pull_request.title;
          
          await github.rest.issues.create({
            owner,
            repo,
            title: `CI Failed: ${pr_title}`,
            body: `CI pipeline failed for PR #${pr_number}\n\nPlease check the [Actions tab](${context.payload.repository.html_url}/actions/runs/${context.runId}) for more details.`,
            labels: ['CI failure', 'needs attention']
          });

    - name: Handle PR checks result
      if: success()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          const pr_number = context.payload.pull_request.number;
          
          try {
            // Try to approve the PR
            await github.rest.pulls.createReview({
              owner,
              repo,
              pull_number: pr_number,
              event: 'APPROVE',
              body: '✅ All CI checks have passed! Automatically approved.'
            });
          } catch (error) {
            // If we can't approve (e.g., self-approval), just add a comment
            console.log('Could not auto-approve PR:', error.message);
          }

          // Always add a comment about passing checks
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number: pr_number,
            body: '✅ All CI checks have passed! Ready for review.\n\n' +
                  'Note: Auto-approval may not be possible if this is a self-submitted PR.'
          });
